datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  role          Role            @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  authoredDocuments Document[] @relation("AuthoredDocuments")
  signeedDocuments  Document[] @relation("SigneedDocuments")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model ResetPasswordToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Document {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  pathname      String?
  url           String?
  key           String?
  fileName      String?
  status        DocumentStatus @default(PENDING)
  signedAt      DateTime?
  expiresAt     DateTime?
  preparedAt    DateTime?      // Added preparedAt field
  expiresInDays Int?           // Added expiresInDays field
  signeeId      String?        @db.ObjectId
  authorId      String         @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documentType  DocumentType   @default(UNSIGNED)
  hash          String? // File hash for integrity verification and duplicate detection
  dueDate       DateTime?
  message       String?

  author User  @relation("AuthoredDocuments", fields: [authorId], references: [id], onDelete: Cascade)
  signee User? @relation("SigneedDocuments", fields: [signeeId], references: [id], onDelete: SetNull)
  fields DocumentField[]
}

model DocumentField {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  documentId  String  @db.ObjectId
  type        String
  label       String
  required    Boolean @default(false)
  placeholder String?
  x           Float
  y           Float
  width       Float
  height      Float
  pageNumber  Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  SIGNED
  UNSIGNED
}
